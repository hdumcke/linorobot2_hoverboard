/*!
  \~japanese
  \page library_tutorial_page チュートリアル

  ライブラリの使い方のサンプルを用いて説明します。

  \~english
  \page library_tutorial_page Tutorial page

  Explains with examples of how to use the library functions


  \~japanese
  - <b>チュートリアル</b>
    - \ref library_tutorial_connect_and_get
    - \ref library_tutorial_get_scans
    - \ref library_tutorial_settings
    - \ref library_tutorial_timestamp
    - \ref library_tutorial_xy

  \~english
  - <b>Tutorial</b>
    - \ref library_tutorial_connect_and_get
    - \ref library_tutorial_get_scans
    - \ref library_tutorial_settings
    - \ref library_tutorial_timestamp
    - \ref library_tutorial_xy


  \~japanese
  \section library_tutorial_connect_and_get センサとの接続と距離データの取得

  センサから距離データを取得する基本的な手順は

  - センサに対して接続を行う。
    - シリアルポート名を指定して接続する。(シリアル、USB 接続のとき)
    - IP アドレスを指定して接続する。(Ethernet 接続のとき)

  - データ受信のための領域を確保する
    - malloc などで領域を確保する。

  - センサから距離データを取得する。
    - 計測を開始する。
    - 計測された距離データを受信する。

  - センサとの接続を閉じる。
    - 計測を中断し、センサとの接続を切断する。

  となります。

  上記の処理をプログラムで記述したものを、以下に示します。
  \include connect_and_get.c

  プログラム中に出てくる urg_t 構造体は urg_open() 関数を呼び出したときに初期化され、センサパラメータの取得や以降のデータ送受信を管理しています。

  このプログラムを実行すると length_data 領域に length_data_size 個のデータが格納されます。\n
  取得した距離データを順に表示するには、以下のように記述します。
  \code
for (i = 0; i < length_data_size; ++i) {
    printf("%ld, ", length_data[i]);
}
printf("\n"); \endcode

  \n
  また、センサとの接続をイーサーネットで行う場合 urg_open() の記述を以下のように変更します。
  \dontinclude connect_ethernet.c
  \skip //
  \until todo check error


  \section library_tutorial_get_scans 連続して距離データを取得する

  scan_times 回の距離データを取得するプログラムは、以下のように記述できます。
  \dontinclude get_scans.c
  \skip //
  \until }


  大抵の場合 urg_start_measurement() と urg_get_distance() のペアを繰り返して呼び出すよりも、取得回数を指定して１度 urg_start_measurement() を呼び出しておき urg_get_distance() で繰り返しデータを取得する方が効率よくデータを取得できます。


  \section library_tutorial_settings 計測のパラメータ設定

  計測の範囲、ステップ数の間引き設定、スキャンの間引き設定を行うことができます。計測の範囲を狭くしたり、間引きを行うことで受信データ量を減らすことができ、ライブラリ動作の負荷が減少します。

  \dontinclude set_parameter.c
  \skip //
  \until urg_start
  \line check error code


  \section library_tutorial_timestamp 距離データを取得したときのタイムスタンプを取得する

  計測がいつのタイミングで行われたかは urg_get_distance() 関数で取得できます。

  urg_get_distance() を用いて取得したタイムスタンプを表示するプログラムは、以下のように記述できます。
  \dontinclude get_timestamp.c
  \skip //
  \until }


  通常はセンサの計測周期で計測が行われますが、ライブラリを処理する PC の負荷が高い場合は計測データのタイムスタンプ間隔が、センサの計測周期よりも長くなる場合があります。この場合、計測するステップ数を間引くなどの変更で対処できることがあります。


  \section library_tutorial_xy 距離データを X-Y 座標系に変換する

  計測した距離データを X-Y 座標に変換するには urg_index2rad() を用いてその距離がどの方向にあるかを計算します。

  \dontinclude convert_xy.c
  \skip //
  \until printf("\n");


  urg_index2rad() は、センサ正面が 0 [deg] としたときのステップの向きをラジアン単位で返します。

  \image html sensor_index_image.png センサと urg_index2rad() の関係


  \~english
  \section library_tutorial_connect_and_get How to connect with the sensor and get measurement data

  The basic procedure to get measurement data from the sensor is:

  - Connect to the sensor
    - Define the name of the serial port (device, COM port) to connect to (for serial and USB interfaces)
    - Define the sensor IP address (for Ethernet interface)

  - Allocate memory for measurement data
    - Use malloc or similar

  - Get measurement data
    - Start the measurement process
    - Receive measurement data from the sensor

  - Disconnect from the sensor
    - Stop the measurement process and then close the sensor connection

  The source code for the procedure described above is as follows:
  \include connect_and_get.c

  In the program, the data structure urg_t is initialized by the urg_open() function. This function additionally enables and manages sensor communications, and gets sensor state information and necessary configuration parameters.

  In the program, range data is stored in the length_data array, the number of scan points (steps) is then copied into length_data_size variable.\n
  To display each range data, you can add the following fragment to the program:
  \code
for (i = 0; i < length_data_size; ++i) {
    printf("%ld, ", length_data[i]);
}
printf("\n"); \endcode

  \n
  For an Ethernet interface connection, use the urg_open() function as illustrated in the following code fragment:
  \dontinclude connect_ethernet.c
  \skip //
  \until todo check error


  \section library_tutorial_get_scans How to get measurement data for continuous scans

  The following code illustrates how to get scan_times continuous scans from the sensor:
  \dontinclude get_scans.c
  \skip //
  \until }

  Normally, to receive measurement data from the sensor, the functions urg_start_measurement() and urg_get_distance() are called (in pairs) many times (hand-shake measurement mode). If the number of scans is used, the function urg_start_measurement() is called just once, and then only call urg_get_distance() repeatedly to receive data more effectively from the sensor.


  \section library_tutorial_settings How to configure measurement parameters

  Measurement parameters allow defining the measurement scope (start and end steps), step grouping, and scan skipping. For example, reducing the measurement scope and/or grouping steps reduces the volume of data (message length) transmitted from the sensor and thus the library response is increased. The following code illustrates how to configure measurement parameters.

  \dontinclude set_parameter.c
  \skip //
  \until urg_start
  \line check error code


  \section library_tutorial_timestamp How to get the timestamp from scan data

  It is possible to know the timing at which measurement data was captured on the sensor using the urg_get_distance() function.
  The following code illustrates how to extract the timestamp value on the received scan data.

  \dontinclude get_timestamp.c
  \skip //
  \until }


  Timestamp and measurement data are obtained on the sensor at a constant scanning speed (scan period). If the computer using this library has a heavy load, it is possible that the time interval between scans is longer than the sensor scan period. If that is the case, use the step grouping and/or scan skipping parameters to reduce the load.


  \section library_tutorial_xy How to convert scan data to X-Y coordinates

  To convert measurement data into X-Y coordinates, use the urg_index2rad() function to calculate the angle (in radians) for each step.
  The following code illustrates how to perform coordinates conversion.

  \dontinclude convert_xy.c
  \skip //
  \until printf("\n");


  For the urg_index2rad() function, the front of the sensor corresponds to 0 [radians] and using that reference all the other angles are calculated.

  \image html sensor_index_image.png shows the relation between the sensor and urg_index2rad() function
*/
